/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";
import * as THREE from "three";

export function Avatar(props) {
  const { animation, wireframe, section } = props; // Added section prop
  const { headFollow, cursorFollow } = useControls({
    headFollow: false,
    cursorFollow: false,
  });
  const group = useRef();
  const avatarGroup = useRef();
  const targetScale = 2.5;
  const largeScale = targetScale * 6; // Updated to 6x max
  const [currentScale, setCurrentScale] = useState(targetScale); // Start at normal scale
  const [opacity, setOpacity] = useState(0);
  const [fadeInComplete, setFadeInComplete] = useState(false);

  const { nodes, materials } = useGLTF("models/646d9dcdc8a5f5bddbfac913.glb");

  const { animations: typingAnimation } = useFBX("animations/Typing.fbx");
  const { animations: standingAnimation } = useFBX(
    "animations/Standing Idle.fbx"
  );
  const { animations: fallingAnimation } = useFBX(
    "animations/Falling Idle.fbx"
  );
  const { animations: DancingAnimation } = useFBX(
    "animations/Dancing.fbx"
  );
  const { animations: KneelingAnimation } = useFBX(
    "animations/Kneeling2.fbx"
  );


  typingAnimation[0].name = "Typing";
  standingAnimation[0].name = "Standing";
  fallingAnimation[0].name = "Falling";
  DancingAnimation[0].name = "Dancing";
  KneelingAnimation[0].name = "Kneeling2";

  const { actions } = useAnimations(
    [typingAnimation[0], standingAnimation[0], fallingAnimation[0], DancingAnimation[0], KneelingAnimation[0],],  
    group
  );

  const pulseSpeed = 0.2; // Slow speed for the loop

  const maxScale = 2.6; // Set to 2.6 as requested
  const [animationStartTime, setAnimationStartTime] = useState(0);

  useEffect(() => {
    setAnimationStartTime(0); // Reset to starting scale on section change
  }, [section]);

  useFrame((state, delta) => {
    const head = group.current.getObjectByName("Head");
    const spine = group.current.getObjectByName("Spine2");

    if (headFollow && head) {
      head.lookAt(state.camera.position);
    }

    if (cursorFollow && spine) {
      const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);
      spine.lookAt(target);
    }

    // Slow fade-in animation
    if (!fadeInComplete && opacity < 1) {
      setOpacity(THREE.MathUtils.lerp(opacity, 1, 0.000125 * delta * 60)); // Changed from 0.00025 to 0.000125 (half the speed)
      if (opacity >= 1) setFadeInComplete(true);
    }

    // Scale animation: slowly increase to 10x in section 0
    if (section === 0 && currentScale < largeScale) {
      const lerpFactor = 0.0005; // Very slow increase (adjust for speed)
      const newScale = THREE.MathUtils.lerp(currentScale, largeScale, lerpFactor * delta * 60);
      setCurrentScale(newScale);
    } else if (section > 0 && currentScale > targetScale) {
      const lerpFactor = 0.1; // Fast scale down when leaving section 0
      const newScale = THREE.MathUtils.lerp(currentScale, targetScale, lerpFactor * delta * 60);
      setCurrentScale(newScale);
    }

    // Slow looping scale up to 2.6x and back, starting from 1x
    if (section !== 3) {
      // Eternal slow looping scale up to 2.6x and back
      const elapsed = state.clock.elapsedTime - animationStartTime;
      // Modified to start at minimum scale (low point of the pulse)
      const pulse = (Math.sin(elapsed * pulseSpeed - Math.PI / 2) + 1) / 2; // 0 to 1, starting at 0
      const scaleFactor = 1 + pulse * (maxScale - 1);
      const loopedScale = targetScale * scaleFactor;
      avatarGroup.current.scale.set(loopedScale, loopedScale, loopedScale);
    } else {
      // Reset to starting scale in contact section
      avatarGroup.current.scale.set(targetScale, targetScale, targetScale);
    }
    avatarGroup.current.opacity = opacity; // Apply opacity (note: may need material adjustment for opacity)
  });

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => {
      actions[animation].reset().fadeOut(0.5);
    };
  }, [animation]);

  useEffect(() => {
    Object.values(materials).forEach((material) => {
      material.wireframe = wireframe;
      material.transparent = true; // Enable transparency for fade-in
      material.opacity = opacity;
    });
  }, [wireframe, opacity]);

  return (
    <group {...props} ref={group} dispose={null}>
      <group ref={avatarGroup} scale={currentScale}>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.Wolf3D_Body.geometry}
          material={materials.Wolf3D_Body}
          skeleton={nodes.Wolf3D_Body.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.Wolf3D_Outfit_Top.geometry}
          material={materials.Wolf3D_Outfit_Top}
          skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.Wolf3D_Hair.geometry}
          material={materials.Wolf3D_Hair}
          skeleton={nodes.Wolf3D_Hair.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          name="EyeLeft"
          geometry={nodes.EyeLeft.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeLeft.skeleton}
          morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          name="EyeRight"
          geometry={nodes.EyeRight.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeRight.skeleton}
          morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Wolf3D_Head"
          geometry={nodes.Wolf3D_Head.geometry}
          material={materials.Wolf3D_Skin}
          skeleton={nodes.Wolf3D_Head.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Wolf3D_Teeth"
          geometry={nodes.Wolf3D_Teeth.geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={nodes.Wolf3D_Teeth.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/646d9dcdc8a5f5bddbfac913.glb");
useFBX.preload("animations/Typing.fbx");
useFBX.preload("animations/Standing Idle.fbx");
useFBX.preload("animations/Falling Idle.fbx");
